Commands for ngrok (
./ngrok http example.com:9000 - запускает сервер и перенаправляет трафик
./ngrok http 9000 - просто запуск сервера
./ngrok http file:///var/log - доступ к локальным файлам
./ngrok http https://localhost:8443 - перенаправляет на локальный сервер https
)

python commands(
python -m http.server 4040 - запускает локальный сервер
django: --  https://metanit.com/python/django/1.2.php
python manage.py runserver - запуск сервера django
c:\django>django-admin startproject project_name - создание проекта
python manage.py startapp app_name - создание приложения, прописать название в файле settings.py
python -m venv .venv , .venv\Scripts\activate.bat - создаем и активируем виртуальную среду
)

Linux (
ls - просмотр дерикторий
ps, top, htop - диспетчеры задач
cd - смена диретории
сat - просмотр файлов
awk '{action}' имя_файла.тхт - bash команда для просмотра текстов -- https://habr.com/ru/company/ruvds/blog/665084/
nano, vim, vi - текстовые редакторы (vi/nano/vim имя_файла)

cron - планировщик задач
[
crontab -e {filename} #добавляем задание в крон
* * * * * - минуты - часы - день месяца - месяц(цифра) - день недели(цифра)
использование:
* * * * */путь/к/нужному/скрипту
]
)

Bash/regex/administration (
Виды регекспов:
-Базовые (Basic RE)
-Расширенные (Extended RE)
-Perl RE

Пример скрипта который выбирает выражение и записывает в переменную
#!/bin/bash #обозначение рабочей оболочки
#файл из примера
«
assembly.cat=RF11SNSTFS,
assembly.sn=0001,
assembly.rev=01.02.0,
assembly.bom=01,
assembly.date=06.16,
assembly.label=CLT00006,
assembly.text=,
assembly.R&amp;DRevision=,
»

CAT=$(grep --perl-regexp --max-count=1 --only-matching '(?<=assembly.cat=).*(?=,)' test.txt) 
SN=$(grep --perl-regexp --max-count=1 --only-matching '(?<=assembly.sn=).*(?=,)' test.txt)
echo "$CAT$SN"

https://onedev.net/post/409 #справочник

GREP: [

(?<=) Позитивная ретроспективная проверка (positive lookbehind assertion) !Доступна только в PCRE режиме. Продолжает поиск только если слева от текущей позиции в тексте находится заключённое в скобки выражение

(?=)  Положительная опережающая проверка (positive lookahead assertion). Продолжает поиск только если справа от текущей позиции в тексте находится заключённое в скобки выражение.

(?<!) Негативная ретроспективная проверка (negative lookbehind assertion). Продолжает поиск только если слева от текущей позиции в тексте не находится заключённое в скобки выражение.

(?!)  Негативная опережающая проверка (negative lookahead assertion). Продолжает поиск только если справа от текущей позиции в тексте не находится заключённое в скобки выражение.

]

)

SSH (
ssh-keygen -t rsa/dsa/edsa/sha #генерация с вариантами шифрования
~/.ssh/id_rsa.pub - путь к ключу
sudo apt-get install openssh-server - установка
sudo systemctl status ssh - проверка
sudo ufw allow ssh - открыть порт
/etc/ssh/sshd_config - путь файла конфигурации сервера
ssh remote_username@remote_host - подключение к удаленной машине
https://www.hanselman.com/blog/how-to-ssh-into-wsl2-on-windows-10-from-an-external-machine - инструкция по настройке ssh сервера на WSL

netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=2222 connectaddress=<ip adrr of WSL> connectport=2222 - настройка прокси для подключения к WSL по ssh
netsh advfirewall firewall add rule name=”Open Port 2222 for WSL2” dir=in action=allow protocol=TCP localport=2222 - открываем firewall для входящих соединений
)

git (
git add . - фиксирует изменения
git commit -m "comment" - производит коммит
git push - отправляет на удаленный
git clone --bare repo_name repo_name.git - создание "голого" репозитория для отправки на сервер

# Указание на новый удаленный репозиторий
git remote -v
# Проверка нового удаленного адреса
git remote add origin ссылка на удаленный репозиторий
# Отправка изменений локального репозитория в удаленный, помеченный как источник
git push origin master
)

docker (
docker build (docker-compose build) - сборка контейнера 
docker up - запуск контейнера/ов
)

Статья про PostgreSQL (https://metanit.com/sql/postgresql/1.1.php)
